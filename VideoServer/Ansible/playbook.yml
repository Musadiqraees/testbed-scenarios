
- name: Install Python
  hosts: all
  gather_facts: false
  tasks:
    - include_tasks: ../../Common/Ansible/bootstrap-python.yml
      become: true

- name: Preparation
  hosts: all
  tasks:
    - name: Query hostname
      command: cat /etc/hostname
      register: hostname
      changed_when: False
    - include_tasks: ../../Common/Ansible/bootstrap-docker-tasks.yml
      become: true

- name: Install the Bitflow collector and injector
  hosts:
    - hypervisors
    - vms:!client
  vars:
    injector: "{{ injector_vm_phys }}"
  tasks:
    - include_tasks: ../../Common/Ansible/bitflow-collector-tasks.yml
      become: true
    - include_tasks: ../../Common/Ansible/injector-tasks.yml
      become: true

- name: Install the service layer injector
  hosts:
    - vms:!client
  vars:
    injector: "{{ injector_service }}"
  tasks:
    - include_tasks: ../../Common/Ansible/injector-tasks.yml
      become: true

- name: Install the backend video server
  hosts: backend
  tags: [ docker, backend ]
  tasks:
    - name: Run backend video server docker container
      become: true
      docker_container:
        name: rtmp-server
        image: antongulenko/rtmp-nginx-server
        pull: true
        ports:
          # The container ports are hardcoded because they cannot be configured
          - "{{ rtmp.backend_http_port }}:8080"
          - "{{ rtmp.port }}:1935"

- name: Install the load balancer
  hosts: load-balancer
  tags: [ docker, load-balancer ]
  tasks:
    - name: Run load balancer docker container
      become: true
      docker_container:
        name: rtmp-balancer
        image: antongulenko/rtmp-haproxy-balancer
        pull: true
        ports:
          - "{{ rtmp.port }}:{{ rtmp.port }}"
          - "{{ rtmp.balancer_stats_port }}:{{ rtmp.balancer_stats_port }}"
        env:
          RTMP_PORT: "{{ rtmp.port }}"
          STATS_PORT: "{{ rtmp.balancer_stats_port }}"
          RTMP_SERVERS: "{{ groups['backend'] | map('extract', hostvars, ['ansible_host']) | join(' ') }}"

- name: Install the load generation client
  hosts: client
  tags: [ docker, client ]
  vars:
    data_directory: /opt/bitflow/rtmp-client
    data_directory_mounted: /rtmp-client-data
  tasks:
    - name: Create local service quality data directory
      become: true
      file:
        path: "{{ rtmp.client_log_dir }}"
        state: directory
    - name: Create default load generation targets file
      copy:
        dest: "{{ rtmp.client_targets_file }}"
        force: false
        content: |
          {% for host in groups['backend'] %}
          rtmp://{{ hostvars[host]['ansible_host'] }}:{{ rtmp.port }}{{ rtmp.default_request_path }}
          {% endfor %}
    - name: Run client docker container
      become: true
      docker_container:
        name: rtmp-client-{{ item }}
        image: antongulenko/rtmp-client
        pull: true
        volumes:
          - "{{ rtmp.client_log_dir }}:{{ rtmp.client_log_dir_mounted }}"
          - "{{ rtmp.client_targets_file }}:{{ rtmp.client_targets_file_mounted }}"
        env:
          MRL_LOG: "{{ rtmp.client_log_dir_mounted }}/{{ rtmp.client_log_file }}-{{ item }}"
          LOOP: -1
          MRL_BATCH_FILE: "{{ rtmp.client_targets_file_mounted }}"
      with_sequence: count={{ rtmp_clients_per_host }}
    - name: Query names of client containers
      shell: |
        mapfile -t CONTAINERS <<< $(docker ps --no-trunc --format '{% raw %}{{.Names}}{% endraw %}' --filter 'Name=rtmp-client-*')
        for name in ${CONTAINERS[*]}; do
          client_num="${name:12}" # 12 is the length of 'rtmp-client-', which is stripped to obtain the number in the end
          # Output the IDs of all containers with numbers outside of the configured range
          test "$client_num" -lt 0 -o "$client_num" -gt {{ rtmp_clients_per_host}} && echo "$name" || continue
        done
      args:
        executable: /bin/bash
      register: client_containers
      changed_when: false
    - name: Kill client containers
      docker_container:
        name: "{{ item }}"
        state: absent
      with_items: "{{ client_containers.stdout_lines }}"
