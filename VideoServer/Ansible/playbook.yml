#!/usr/bin/env ansible-playbook

- name: Install Python
  tags: [ bootstrap ]
  hosts: all
  gather_facts: false
  tasks:
    - include_tasks: ../../Common/Ansible/bootstrap-python.yml
      become: true

- name: Preparation
  hosts: all
  tasks:
    - name: Query hostname
      command: cat /etc/hostname
      register: hostname
      changed_when: False
    - include_tasks: ../../Common/Ansible/bootstrap-docker-tasks.yml
      become: true

- name: Install the Bitflow collector and injector
  hosts:
    - hypervisors
    - vms:!client
  vars:
    injector: "{{ injector_vm_phys }}"
  tasks:
    - include_tasks: ../../Common/Ansible/bitflow-collector-tasks.yml
      tags: [ docker, collector ]
      become: true
    - include_tasks: ../../Common/Ansible/injector-tasks.yml
      tags: [ docker, injector ]
      become: true

- name: Install the backend video server
  hosts: backend
  tags: [ docker, backend ]
  tasks:
    - name: Run backend video server docker container
      become: true
      docker_container:
        name: rtmp-server
        image: antongulenko/rtmp-nginx-server
        pull: true
        ports:
          # The container ports are hardcoded because they cannot be configured
          - "{{ rtmp.backend_http_port }}:8080"
          - "{{ rtmp.port }}:1935"

- name: Install the load balancer
  hosts: load-balancer
  tags: [ docker, load-balancer ]
  tasks:
    - name: Run load balancer docker container
      become: true
      docker_container:
        name: rtmp-balancer
        image: antongulenko/rtmp-haproxy-balancer
        pull: true
        volumes:
          - "/dev/log:/dev/log"
        ports:
          - "{{ rtmp.port }}:{{ rtmp.port }}"
          - "{{ rtmp.balancer_stats_port }}:{{ rtmp.balancer_stats_port }}"
        env:
          RTMP_PORT: "{{ rtmp.port }}"
          STATS_PORT: "{{ rtmp.balancer_stats_port }}"
          RTMP_SERVERS: "{{ groups['backend'] | map('extract', hostvars, ['ansible_host']) | join(' ') }}"

- name: Install the load generation client
  hosts: client
  tags: [ docker, client ]
  vars:
    data_directory: /opt/bitflow/rtmp-client
    data_directory_mounted: /rtmp-client-data
  tasks:
    - name: Create local client targets directories
      become: true
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ rtmp.client_targets_dir }}"
    - name: Create local client directories
      become: true
      file:
        path: "{{ rtmp.client_log_dir }}/{{ rtmp.client_log_dir_prefix }}-{{ item }}"
        state: directory
      with_sequence: count={{ rtmp_clients_per_host }}
    - name: Create default load generation targets file
      become: true
      copy:
        dest: "{{ rtmp.client_targets_dir }}/{{ item }}.txt"
        force: false
        content: |
          {% for host in groups['load-balancer'] %}
          rtmp://{{ hostvars[host]['ansible_host'] }}:{{ rtmp.port }}{{ rtmp.default_request_path }}
          {% endfor %}
      with_sequence: count={{ rtmp_clients_per_host }}
    - name: Delete excess load generation targets files
      become: true
      shell: |
        # Delete files that are not used (in case of scaling down the number of clients)
        expected_files=$(for i in $(seq {{ rtmp_clients_per_host }}); do echo "-o -name $i.txt"; done)
        NUM=$(find "{{ rtmp.client_targets_dir }}" -type f -a -not \( -false $expected_files \) -delete -print | wc -l)
        test "$NUM" -gt 0 && exit 66 || exit 0
      args:
        executable: /bin/bash
      register: delete_excess_targets
      changed_when: "delete_excess_targets.rc == 66"
      failed_when: "delete_excess_targets.rc != 66 and delete_excess_targets.rc != 0"
    - name: Run client docker container
      become: true
      docker_container:
        name: rtmp-client-{{ item }}
        image: antongulenko/rtmp-client
        pull: true
        volumes:
          - "{{ rtmp.client_log_dir }}:{{ rtmp.client_log_dir_mounted }}"
          - "{{ rtmp.client_targets_dir }}:{{ rtmp.client_targets_dir_mounted }}"
        env:
          MRL_LOG_DIR: "{{ rtmp.client_log_dir_mounted }}/{{ rtmp.client_log_dir_prefix }}-{{ item }}"
          LOOP: -1
          MRL_BATCH_FILE: "{{ rtmp.client_targets_dir_mounted }}/{{ item }}.txt"
          MRL_BATCH_INDEX_OFFSET: -1 # Random offset for every client
      with_sequence: count={{ rtmp_clients_per_host }}
    - name: Query names of client containers
      shell: |
        mapfile -t CONTAINERS <<< $(docker ps --no-trunc --format '{% raw %}{{.Names}}{% endraw %}' --filter 'Name=rtmp-client-*')
        for name in ${CONTAINERS[*]}; do
          client_num="${name:12}" # 12 is the length of 'rtmp-client-' (the container name prefix), which is stripped to obtain the number in the end
          # Output the IDs of all containers with numbers outside of the configured range
          test "$client_num" -lt 0 -o "$client_num" -gt {{ rtmp_clients_per_host}} && echo "$name" || continue
        done
      args:
        executable: /bin/bash
      register: client_containers
      changed_when: false
    - name: Kill client containers
      docker_container:
        name: "{{ item }}"
        state: absent
      with_items: "{{ client_containers.stdout_lines }}"
